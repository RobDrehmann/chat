{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","map","msg","ChatMessage","message","id","onSubmit","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRASKA,IAASC,KAAKC,OAWhBF,IAASG,MAVTH,IAASI,cAAc,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOpB,IAAOC,EAAOZ,IAASY,OACjBC,EAAYb,IAASa,YAoB3B,SAASC,IAMP,OAGE,wBAAQC,QARe,WAEvB,IAAMC,EAAW,IAAIhB,IAASY,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAKrB,iCAKJ,SAASG,IACP,OAEE,wBAAQJ,QAAS,kBAAMH,EAAKQ,WAA5B,sBAGJ,SAASC,IACP,IAAMC,EAAcT,EAAUU,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,YAAY,QAAQC,MAAM,GAC5D,EAAmBC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEKxB,EAAKyB,YAAtBC,EAFY,EAEZA,IAAKC,EAFO,EAEPA,SAFO,SAGZjB,EAAYkB,IAAI,CACpBC,KAAMV,EACNW,UAAW1C,IAASa,UAAU8B,WAAWC,kBACzCN,MACAC,aAPgB,OASlBP,EAAa,IATK,2CAAH,sDAWjB,OAEE,qCACA,8BACE,cAACb,EAAD,MAGA,8BACGU,GAAYA,EAASgB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA2BC,QAASF,GAAjBA,EAAIG,SAExD,uBAAMC,SAAWjB,EAAjB,UACE,uBAAOkB,MAAQpB,EAAWqB,SAAU,SAAClB,GAAD,OAAOF,EAAaE,EAAEmB,OAAOF,UACjE,wBAAQG,KAAK,SAAb,wBASV,SAASP,EAAYQ,GACnB,MAAgCA,EAAMP,QAA9BP,EAAR,EAAQA,KAAMH,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAEbiB,EAAelB,IAAQ1B,EAAKyB,YAAYC,IAAM,OAAS,WAE7D,OAAQ,mCACN,sBAAKmB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKnB,IACV,4BAAIE,SAKKkB,MAvFf,WACE,MAAeC,YAAahD,GAArBiD,EAAP,oBACA,OAEE,sBAAKJ,UAAU,MAAf,UAGE,wBAAQA,UAAU,eAGlB,6CACA,kDAECI,EAAO,cAACxC,EAAD,IAAc,cAACP,EAAD,QC7BbgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9288f5de.chunk.js","sourcesContent":["\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\nif (!firebase.apps.length) {\n   firebase.initializeApp({\n     apiKey: \"AIzaSyD1GDCZi29UVcfj7yMVh7-6QtgAs6FZG1M\",\n     authDomain: \"chat-e5c95.firebaseapp.com\",\n     projectId: \"chat-e5c95\",\n     storageBucket: \"chat-e5c95.appspot.com\",\n     messagingSenderId: \"334888117557\",\n     appId: \"1:334888117557:web:52d8c80d67d3d35d69d87c\",\n     measurementId: \"G-W42C6RM14K\"\n   });\n}else {\n   firebase.app(); // if already initialized, use that one\n}\n\n\nconst  auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n\n    <div className=\"App\">\n\n\n      <header className=\"App-header\">\n\n      </header>\n      <h2>Message App</h2>\n      <h4>By: Rob Drehmann</h4>\n\n      {user ? <ChatRoom />: <SignIn /> }\n    </div>\n  );\n}\nfunction SignIn() {\n  const signInWithGoogle = () => {\n\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n\n\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n\n\n  )\n}\nfunction SignOut() {\n  return (\n\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\nfunction ChatRoom(){\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt','desc').limit(7);\n  const [messages] = useCollectionData(query, {idField: 'id'});\n  const [formValue, setFormValue] = useState('');\n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const{uid, photoURL} = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue('');\n  }\n  return (\n\n    <>\n    <div>\n      <SignOut />\n    </div>\n\n      <div>\n        {messages && messages.map(msg => <ChatMessage key ={msg.id} message={msg} />)}\n        </div>\n        <form onSubmit ={sendMessage}>\n          <input value ={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n          <button type=\"submit\">Send</button>\n        </form>\n\n\n\n\n        </>\n  )\n}\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}